"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fuse.js";
exports.ids = ["vendor-chunks/fuse.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/fuse.js/dist/fuse.common.js":
/*!**************************************************!*\
  !*** ./node_modules/fuse.js/dist/fuse.common.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/**\n * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2022 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  Object.defineProperty(subClass, \"prototype\", {\n    value: Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    }),\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\nvar INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\nfunction isObject(value) {\n  return _typeof(value) === 'object';\n} // Checks if `value` is object-like.\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nvar EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nvar INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\nvar LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = function LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key) {\n  return \"Invalid value for key \".concat(key);\n};\nvar PATTERN_LENGTH_TOO_LARGE = function PATTERN_LENGTH_TOO_LARGE(max) {\n  return \"Pattern length exceeds max of \".concat(max, \".\");\n};\nvar MISSING_KEY_PROPERTY = function MISSING_KEY_PROPERTY(name) {\n  return \"Missing \".concat(name, \" property in key\");\n};\nvar INVALID_KEY_WEIGHT_VALUE = function INVALID_KEY_WEIGHT_VALUE(key) {\n  return \"Property 'weight' in key '\".concat(key, \"' must be a positive integer\");\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar KeyStore = /*#__PURE__*/function () {\n  function KeyStore(keys) {\n    var _this = this;\n\n    _classCallCheck(this, KeyStore);\n\n    this._keys = [];\n    this._keyMap = {};\n    var totalWeight = 0;\n    keys.forEach(function (key) {\n      var obj = createKey(key);\n      totalWeight += obj.weight;\n\n      _this._keys.push(obj);\n\n      _this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(function (key) {\n      key.weight /= totalWeight;\n    });\n  }\n\n  _createClass(KeyStore, [{\n    key: \"get\",\n    value: function get(keyId) {\n      return this._keyMap[keyId];\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._keys;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return JSON.stringify(this._keys);\n    }\n  }]);\n\n  return KeyStore;\n}();\nfunction createKey(key) {\n  var path = null;\n  var id = null;\n  var src = null;\n  var weight = 1;\n  var getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    var name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return {\n    path: path,\n    id: id,\n    weight: weight,\n    src: src,\n    getFn: getFn\n  };\n}\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  var list = [];\n  var arr = false;\n\n  var deepGet = function deepGet(obj, path, index) {\n    if (!isDefined(obj)) {\n      return;\n    }\n\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      var key = path[index];\n      var value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (var i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nvar MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nvar BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: function sortFn(a, b) {\n    return a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1;\n  }\n};\nvar FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nvar AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\nvar Config = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, BasicOptions), MatchOptions), FuzzyOptions), AdvancedOptions);\n\nvar SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm() {\n  var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var mantissa = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var cache = new Map();\n  var m = Math.pow(10, mantissa);\n  return {\n    get: function get(value) {\n      var numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      } // Default function is 1/sqrt(x), weight makes that variable\n\n\n      var norm = 1 / Math.pow(numTokens, 0.5 * weight); // In place of `toFixed(mantissa)`, for faster computation\n\n      var n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n    clear: function clear() {\n      cache.clear();\n    }\n  };\n}\n\nvar FuseIndex = /*#__PURE__*/function () {\n  function FuseIndex() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$getFn = _ref.getFn,\n        getFn = _ref$getFn === void 0 ? Config.getFn : _ref$getFn,\n        _ref$fieldNormWeight = _ref.fieldNormWeight,\n        fieldNormWeight = _ref$fieldNormWeight === void 0 ? Config.fieldNormWeight : _ref$fieldNormWeight;\n\n    _classCallCheck(this, FuseIndex);\n\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  _createClass(FuseIndex, [{\n    key: \"setSources\",\n    value: function setSources() {\n      var docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.docs = docs;\n    }\n  }, {\n    key: \"setIndexRecords\",\n    value: function setIndexRecords() {\n      var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.records = records;\n    }\n  }, {\n    key: \"setKeys\",\n    value: function setKeys() {\n      var _this = this;\n\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.keys = keys;\n      this._keysMap = {};\n      keys.forEach(function (key, idx) {\n        _this._keysMap[key.id] = idx;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this2 = this;\n\n      if (this.isCreated || !this.docs.length) {\n        return;\n      }\n\n      this.isCreated = true; // List is Array<String>\n\n      if (isString(this.docs[0])) {\n        this.docs.forEach(function (doc, docIndex) {\n          _this2._addString(doc, docIndex);\n        });\n      } else {\n        // List is Array<Object>\n        this.docs.forEach(function (doc, docIndex) {\n          _this2._addObject(doc, docIndex);\n        });\n      }\n\n      this.norm.clear();\n    } // Adds a doc to the end of the index\n\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      var idx = this.size();\n\n      if (isString(doc)) {\n        this._addString(doc, idx);\n      } else {\n        this._addObject(doc, idx);\n      }\n    } // Removes the doc at the specified index of the index\n\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n      for (var i = idx, len = this.size(); i < len; i += 1) {\n        this.records[i].i -= 1;\n      }\n    }\n  }, {\n    key: \"getValueForItemAtKeyId\",\n    value: function getValueForItemAtKeyId(item, keyId) {\n      return item[this._keysMap[keyId]];\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.records.length;\n    }\n  }, {\n    key: \"_addString\",\n    value: function _addString(doc, docIndex) {\n      if (!isDefined(doc) || isBlank(doc)) {\n        return;\n      }\n\n      var record = {\n        v: doc,\n        i: docIndex,\n        n: this.norm.get(doc)\n      };\n      this.records.push(record);\n    }\n  }, {\n    key: \"_addObject\",\n    value: function _addObject(doc, docIndex) {\n      var _this3 = this;\n\n      var record = {\n        i: docIndex,\n        $: {}\n      }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      this.keys.forEach(function (key, keyIndex) {\n        var value = key.getFn ? key.getFn(doc) : _this3.getFn(doc, key.path);\n\n        if (!isDefined(value)) {\n          return;\n        }\n\n        if (isArray(value)) {\n          (function () {\n            var subRecords = [];\n            var stack = [{\n              nestedArrIndex: -1,\n              value: value\n            }];\n\n            while (stack.length) {\n              var _stack$pop = stack.pop(),\n                  nestedArrIndex = _stack$pop.nestedArrIndex,\n                  _value = _stack$pop.value;\n\n              if (!isDefined(_value)) {\n                continue;\n              }\n\n              if (isString(_value) && !isBlank(_value)) {\n                var subRecord = {\n                  v: _value,\n                  i: nestedArrIndex,\n                  n: _this3.norm.get(_value)\n                };\n                subRecords.push(subRecord);\n              } else if (isArray(_value)) {\n                _value.forEach(function (item, k) {\n                  stack.push({\n                    nestedArrIndex: k,\n                    value: item\n                  });\n                });\n              } else ;\n            }\n\n            record.$[keyIndex] = subRecords;\n          })();\n        } else if (isString(value) && !isBlank(value)) {\n          var subRecord = {\n            v: value,\n            n: _this3.norm.get(value)\n          };\n          record.$[keyIndex] = subRecord;\n        }\n      });\n      this.records.push(record);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys,\n        records: this.records\n      };\n    }\n  }]);\n\n  return FuseIndex;\n}();\nfunction createIndex(keys, docs) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$getFn = _ref2.getFn,\n      getFn = _ref2$getFn === void 0 ? Config.getFn : _ref2$getFn,\n      _ref2$fieldNormWeight = _ref2.fieldNormWeight,\n      fieldNormWeight = _ref2$fieldNormWeight === void 0 ? Config.fieldNormWeight : _ref2$fieldNormWeight;\n\n  var myIndex = new FuseIndex({\n    getFn: getFn,\n    fieldNormWeight: fieldNormWeight\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\nfunction parseIndex(data) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref3$getFn = _ref3.getFn,\n      getFn = _ref3$getFn === void 0 ? Config.getFn : _ref3$getFn,\n      _ref3$fieldNormWeight = _ref3.fieldNormWeight,\n      fieldNormWeight = _ref3$fieldNormWeight === void 0 ? Config.fieldNormWeight : _ref3$fieldNormWeight;\n\n  var keys = data.keys,\n      records = data.records;\n  var myIndex = new FuseIndex({\n    getFn: getFn,\n    fieldNormWeight: fieldNormWeight\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction computeScore$1(pattern) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$errors = _ref.errors,\n      errors = _ref$errors === void 0 ? 0 : _ref$errors,\n      _ref$currentLocation = _ref.currentLocation,\n      currentLocation = _ref$currentLocation === void 0 ? 0 : _ref$currentLocation,\n      _ref$expectedLocation = _ref.expectedLocation,\n      expectedLocation = _ref$expectedLocation === void 0 ? 0 : _ref$expectedLocation,\n      _ref$distance = _ref.distance,\n      distance = _ref$distance === void 0 ? Config.distance : _ref$distance,\n      _ref$ignoreLocation = _ref.ignoreLocation,\n      ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;\n\n  var accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  var proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices() {\n  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;\n  var indices = [];\n  var start = -1;\n  var end = -1;\n  var i = 0;\n\n  for (var len = matchmask.length; i < len; i += 1) {\n    var match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n}\n\n// Machine word size\nvar MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$location = _ref.location,\n      location = _ref$location === void 0 ? Config.location : _ref$location,\n      _ref$distance = _ref.distance,\n      distance = _ref$distance === void 0 ? Config.distance : _ref$distance,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,\n      _ref$findAllMatches = _ref.findAllMatches,\n      findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,\n      _ref$minMatchCharLeng = _ref.minMatchCharLength,\n      minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,\n      _ref$includeMatches = _ref.includeMatches,\n      includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,\n      _ref$ignoreLocation = _ref.ignoreLocation,\n      ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;\n\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  var patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  var textLen = text.length; // Handle the case when location > text.length\n\n  var expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  var currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  var bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  var computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  var matchMask = computeMatches ? Array(textLen) : [];\n  var index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    var score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      var i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  var lastBitArr = [];\n  var finalScore = 1;\n  var binMax = patternLen + textLen;\n  var mask = 1 << patternLen - 1;\n\n  for (var _i = 0; _i < patternLen; _i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    var binMin = 0;\n    var binMid = binMax;\n\n    while (binMin < binMid) {\n      var _score2 = computeScore$1(pattern, {\n        errors: _i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation: expectedLocation,\n        distance: distance,\n        ignoreLocation: ignoreLocation\n      });\n\n      if (_score2 <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    var start = Math.max(1, expectedLocation - binMid + 1);\n    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    var bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << _i) - 1;\n\n    for (var j = finish; j >= start; j -= 1) {\n      var currentLocation = j - 1;\n      var charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (_i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: _i,\n          currentLocation: currentLocation,\n          expectedLocation: expectedLocation,\n          distance: distance,\n          ignoreLocation: ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    var _score = computeScore$1(pattern, {\n      errors: _i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n\n    if (_score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  var result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    var indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  var mask = {};\n\n  for (var i = 0, len = pattern.length; i < len; i += 1) {\n    var _char = pattern.charAt(i);\n\n    mask[_char] = (mask[_char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nvar BitapSearch = /*#__PURE__*/function () {\n  function BitapSearch(pattern) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$location = _ref.location,\n        location = _ref$location === void 0 ? Config.location : _ref$location,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === void 0 ? Config.distance : _ref$distance,\n        _ref$includeMatches = _ref.includeMatches,\n        includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,\n        _ref$isCaseSensitive = _ref.isCaseSensitive,\n        isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive,\n        _ref$ignoreLocation = _ref.ignoreLocation,\n        ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;\n\n    _classCallCheck(this, BitapSearch);\n\n    this.options = {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    var addChunk = function addChunk(pattern, startIndex) {\n      _this.chunks.push({\n        pattern: pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex: startIndex\n      });\n    };\n\n    var len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      var i = 0;\n      var remainder = len % MAX_BITS;\n      var end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        var startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  _createClass(BitapSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var _this$options = this.options,\n          isCaseSensitive = _this$options.isCaseSensitive,\n          includeMatches = _this$options.includeMatches;\n\n      if (!isCaseSensitive) {\n        text = text.toLowerCase();\n      } // Exact match\n\n\n      if (this.pattern === text) {\n        var _result = {\n          isMatch: true,\n          score: 0\n        };\n\n        if (includeMatches) {\n          _result.indices = [[0, text.length - 1]];\n        }\n\n        return _result;\n      } // Otherwise, use Bitap algorithm\n\n\n      var _this$options2 = this.options,\n          location = _this$options2.location,\n          distance = _this$options2.distance,\n          threshold = _this$options2.threshold,\n          findAllMatches = _this$options2.findAllMatches,\n          minMatchCharLength = _this$options2.minMatchCharLength,\n          ignoreLocation = _this$options2.ignoreLocation;\n      var allIndices = [];\n      var totalScore = 0;\n      var hasMatches = false;\n      this.chunks.forEach(function (_ref2) {\n        var pattern = _ref2.pattern,\n            alphabet = _ref2.alphabet,\n            startIndex = _ref2.startIndex;\n\n        var _search = search(text, pattern, alphabet, {\n          location: location + startIndex,\n          distance: distance,\n          threshold: threshold,\n          findAllMatches: findAllMatches,\n          minMatchCharLength: minMatchCharLength,\n          includeMatches: includeMatches,\n          ignoreLocation: ignoreLocation\n        }),\n            isMatch = _search.isMatch,\n            score = _search.score,\n            indices = _search.indices;\n\n        if (isMatch) {\n          hasMatches = true;\n        }\n\n        totalScore += score;\n\n        if (isMatch && indices) {\n          allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n        }\n      });\n      var result = {\n        isMatch: hasMatches,\n        score: hasMatches ? totalScore / this.chunks.length : 1\n      };\n\n      if (hasMatches && includeMatches) {\n        result.indices = allIndices;\n      }\n\n      return result;\n    }\n  }]);\n\n  return BitapSearch;\n}();\n\nvar BaseMatch = /*#__PURE__*/function () {\n  function BaseMatch(pattern) {\n    _classCallCheck(this, BaseMatch);\n\n    this.pattern = pattern;\n  }\n\n  _createClass(BaseMatch, [{\n    key: \"search\",\n    value: function\n      /*text*/\n    search() {}\n  }], [{\n    key: \"isMultiMatch\",\n    value: function isMultiMatch(pattern) {\n      return getMatch(pattern, this.multiRegex);\n    }\n  }, {\n    key: \"isSingleMatch\",\n    value: function isSingleMatch(pattern) {\n      return getMatch(pattern, this.singleRegex);\n    }\n  }]);\n\n  return BaseMatch;\n}();\n\nfunction getMatch(pattern, exp) {\n  var matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n}\n\nvar ExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(ExactMatch, _BaseMatch);\n\n  var _super = _createSuper(ExactMatch);\n\n  function ExactMatch(pattern) {\n    _classCallCheck(this, ExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(ExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text === this.pattern;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^=\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^=(.*)$/;\n    }\n  }]);\n\n  return ExactMatch;\n}(BaseMatch);\n\nvar InverseExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(InverseExactMatch, _BaseMatch);\n\n  var _super = _createSuper(InverseExactMatch);\n\n  function InverseExactMatch(pattern) {\n    _classCallCheck(this, InverseExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(InverseExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var index = text.indexOf(this.pattern);\n      var isMatch = index === -1;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)$/;\n    }\n  }]);\n\n  return InverseExactMatch;\n}(BaseMatch);\n\nvar PrefixExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(PrefixExactMatch, _BaseMatch);\n\n  var _super = _createSuper(PrefixExactMatch);\n\n  function PrefixExactMatch(pattern) {\n    _classCallCheck(this, PrefixExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(PrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^\\^(.*)$/;\n    }\n  }]);\n\n  return PrefixExactMatch;\n}(BaseMatch);\n\nvar InversePrefixExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(InversePrefixExactMatch, _BaseMatch);\n\n  var _super = _createSuper(InversePrefixExactMatch);\n\n  function InversePrefixExactMatch(pattern) {\n    _classCallCheck(this, InversePrefixExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(InversePrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!\\^(.*)$/;\n    }\n  }]);\n\n  return InversePrefixExactMatch;\n}(BaseMatch);\n\nvar SuffixExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(SuffixExactMatch, _BaseMatch);\n\n  var _super = _createSuper(SuffixExactMatch);\n\n  function SuffixExactMatch(pattern) {\n    _classCallCheck(this, SuffixExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(SuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [text.length - this.pattern.length, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)\\$$/;\n    }\n  }]);\n\n  return SuffixExactMatch;\n}(BaseMatch);\n\nvar InverseSuffixExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(InverseSuffixExactMatch, _BaseMatch);\n\n  var _super = _createSuper(InverseSuffixExactMatch);\n\n  function InverseSuffixExactMatch(pattern) {\n    _classCallCheck(this, InverseSuffixExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(InverseSuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)\\$$/;\n    }\n  }]);\n\n  return InverseSuffixExactMatch;\n}(BaseMatch);\n\nvar FuzzyMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(FuzzyMatch, _BaseMatch);\n\n  var _super = _createSuper(FuzzyMatch);\n\n  function FuzzyMatch(pattern) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$location = _ref.location,\n        location = _ref$location === void 0 ? Config.location : _ref$location,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === void 0 ? Config.distance : _ref$distance,\n        _ref$includeMatches = _ref.includeMatches,\n        includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,\n        _ref$isCaseSensitive = _ref.isCaseSensitive,\n        isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive,\n        _ref$ignoreLocation = _ref.ignoreLocation,\n        ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;\n\n    _classCallCheck(this, FuzzyMatch);\n\n    _this = _super.call(this, pattern);\n    _this._bitapSearch = new BitapSearch(pattern, {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    });\n    return _this;\n  }\n\n  _createClass(FuzzyMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      return this._bitapSearch.searchIn(text);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'fuzzy';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)$/;\n    }\n  }]);\n\n  return FuzzyMatch;\n}(BaseMatch);\n\nvar IncludeMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(IncludeMatch, _BaseMatch);\n\n  var _super = _createSuper(IncludeMatch);\n\n  function IncludeMatch(pattern) {\n    _classCallCheck(this, IncludeMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(IncludeMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var location = 0;\n      var index;\n      var indices = [];\n      var patternLen = this.pattern.length; // Get all exact matches\n\n      while ((index = text.indexOf(this.pattern, location)) > -1) {\n        location = index + patternLen;\n        indices.push([index, location - 1]);\n      }\n\n      var isMatch = !!indices.length;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: indices\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'include';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^'\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^'(.*)$/;\n    }\n  }]);\n\n  return IncludeMatch;\n}(BaseMatch);\n\nvar searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nvar searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nvar SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nvar OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return pattern.split(OR_TOKEN).map(function (item) {\n    var query = item.trim().split(SPACE_RE).filter(function (item) {\n      return item && !!item.trim();\n    });\n    var results = [];\n\n    for (var i = 0, len = query.length; i < len; i += 1) {\n      var queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      var found = false;\n      var idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        var searcher = searchers[idx];\n        var token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        var _searcher = searchers[idx];\n\n        var _token = _searcher.isSingleMatch(queryItem);\n\n        if (_token) {\n          results.push(new _searcher(_token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n}\n\n// to a singl match\n\nvar MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nvar ExtendedSearch = /*#__PURE__*/function () {\n  function ExtendedSearch(pattern) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$isCaseSensitive = _ref.isCaseSensitive,\n        isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive,\n        _ref$includeMatches = _ref.includeMatches,\n        includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,\n        _ref$minMatchCharLeng = _ref.minMatchCharLength,\n        minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,\n        _ref$ignoreLocation = _ref.ignoreLocation,\n        ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation,\n        _ref$findAllMatches = _ref.findAllMatches,\n        findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,\n        _ref$location = _ref.location,\n        location = _ref$location === void 0 ? Config.location : _ref$location,\n        _ref$threshold = _ref.threshold,\n        threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,\n        _ref$distance = _ref.distance,\n        distance = _ref$distance === void 0 ? Config.distance : _ref$distance;\n\n    _classCallCheck(this, ExtendedSearch);\n\n    this.query = null;\n    this.options = {\n      isCaseSensitive: isCaseSensitive,\n      includeMatches: includeMatches,\n      minMatchCharLength: minMatchCharLength,\n      findAllMatches: findAllMatches,\n      ignoreLocation: ignoreLocation,\n      location: location,\n      threshold: threshold,\n      distance: distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  _createClass(ExtendedSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var query = this.query;\n\n      if (!query) {\n        return {\n          isMatch: false,\n          score: 1\n        };\n      }\n\n      var _this$options = this.options,\n          includeMatches = _this$options.includeMatches,\n          isCaseSensitive = _this$options.isCaseSensitive;\n      text = isCaseSensitive ? text : text.toLowerCase();\n      var numMatches = 0;\n      var allIndices = [];\n      var totalScore = 0; // ORs\n\n      for (var i = 0, qLen = query.length; i < qLen; i += 1) {\n        var searchers = query[i]; // Reset indices\n\n        allIndices.length = 0;\n        numMatches = 0; // ANDs\n\n        for (var j = 0, pLen = searchers.length; j < pLen; j += 1) {\n          var searcher = searchers[j];\n\n          var _searcher$search = searcher.search(text),\n              isMatch = _searcher$search.isMatch,\n              indices = _searcher$search.indices,\n              score = _searcher$search.score;\n\n          if (isMatch) {\n            numMatches += 1;\n            totalScore += score;\n\n            if (includeMatches) {\n              var type = searcher.constructor.type;\n\n              if (MultiMatchSet.has(type)) {\n                allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n              } else {\n                allIndices.push(indices);\n              }\n            }\n          } else {\n            totalScore = 0;\n            numMatches = 0;\n            allIndices.length = 0;\n            break;\n          }\n        } // OR condition, so if TRUE, return\n\n\n        if (numMatches) {\n          var result = {\n            isMatch: true,\n            score: totalScore / numMatches\n          };\n\n          if (includeMatches) {\n            result.indices = allIndices;\n          }\n\n          return result;\n        }\n      } // Nothing was matched\n\n\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n  }], [{\n    key: \"condition\",\n    value: function condition(_, options) {\n      return options.useExtendedSearch;\n    }\n  }]);\n\n  return ExtendedSearch;\n}();\n\nvar registeredSearchers = [];\nfunction register() {\n  registeredSearchers.push.apply(registeredSearchers, arguments);\n}\nfunction createSearcher(pattern, options) {\n  for (var i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    var searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nvar LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nvar KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nvar isExpression = function isExpression(query) {\n  return !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n};\n\nvar isPath = function isPath(query) {\n  return !!query[KeyType.PATH];\n};\n\nvar isLeaf = function isLeaf(query) {\n  return !isArray(query) && isObject(query) && !isExpression(query);\n};\n\nvar convertToExplicit = function convertToExplicit(query) {\n  return _defineProperty({}, LogicalOperator.AND, Object.keys(query).map(function (key) {\n    return _defineProperty({}, key, query[key]);\n  }));\n}; // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options) {\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref3$auto = _ref3.auto,\n      auto = _ref3$auto === void 0 ? true : _ref3$auto;\n\n  var next = function next(query) {\n    var keys = Object.keys(query);\n    var isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      var key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      var pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      var obj = {\n        keyId: createKeyId(key),\n        pattern: pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    var node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(function (key) {\n      var value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(function (item) {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n}\n\nfunction computeScore(results, _ref) {\n  var _ref$ignoreFieldNorm = _ref.ignoreFieldNorm,\n      ignoreFieldNorm = _ref$ignoreFieldNorm === void 0 ? Config.ignoreFieldNorm : _ref$ignoreFieldNorm;\n  results.forEach(function (result) {\n    var totalScore = 1;\n    result.matches.forEach(function (_ref2) {\n      var key = _ref2.key,\n          norm = _ref2.norm,\n          score = _ref2.score;\n      var weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  var matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(function (match) {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    var indices = match.indices,\n        value = match.value;\n    var obj = {\n      indices: indices,\n      value: value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(results, docs) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$includeMatches = _ref.includeMatches,\n      includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,\n      _ref$includeScore = _ref.includeScore,\n      includeScore = _ref$includeScore === void 0 ? Config.includeScore : _ref$includeScore;\n\n  var transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(function (result) {\n    var idx = result.idx;\n    var data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(function (transformer) {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nvar Fuse$1 = /*#__PURE__*/function () {\n  function Fuse(docs) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Fuse);\n\n    this.options = _objectSpread2(_objectSpread2({}, Config), options);\n\n    if (this.options.useExtendedSearch && !true) {}\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  _createClass(Fuse, [{\n    key: \"setCollection\",\n    value: function setCollection(docs, index) {\n      this._docs = docs;\n\n      if (index && !(index instanceof FuseIndex)) {\n        throw new Error(INCORRECT_INDEX_TYPE);\n      }\n\n      this._myIndex = index || createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      if (!isDefined(doc)) {\n        return;\n      }\n\n      this._docs.push(doc);\n\n      this._myIndex.add(doc);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function\n        /* doc, idx */\n      () {\n        return false;\n      };\n      var results = [];\n\n      for (var i = 0, len = this._docs.length; i < len; i += 1) {\n        var doc = this._docs[i];\n\n        if (predicate(doc, i)) {\n          this.removeAt(i);\n          i -= 1;\n          len -= 1;\n          results.push(doc);\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this._docs.splice(idx, 1);\n\n      this._myIndex.removeAt(idx);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this._myIndex;\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$limit = _ref.limit,\n          limit = _ref$limit === void 0 ? -1 : _ref$limit;\n\n      var _this$options = this.options,\n          includeMatches = _this$options.includeMatches,\n          includeScore = _this$options.includeScore,\n          shouldSort = _this$options.shouldSort,\n          sortFn = _this$options.sortFn,\n          ignoreFieldNorm = _this$options.ignoreFieldNorm;\n      var results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n      computeScore(results, {\n        ignoreFieldNorm: ignoreFieldNorm\n      });\n\n      if (shouldSort) {\n        results.sort(sortFn);\n      }\n\n      if (isNumber(limit) && limit > -1) {\n        results = results.slice(0, limit);\n      }\n\n      return format(results, this._docs, {\n        includeMatches: includeMatches,\n        includeScore: includeScore\n      });\n    }\n  }, {\n    key: \"_searchStringList\",\n    value: function _searchStringList(query) {\n      var searcher = createSearcher(query, this.options);\n      var records = this._myIndex.records;\n      var results = []; // Iterate over every string in the index\n\n      records.forEach(function (_ref2) {\n        var text = _ref2.v,\n            idx = _ref2.i,\n            norm = _ref2.n;\n\n        if (!isDefined(text)) {\n          return;\n        }\n\n        var _searcher$searchIn = searcher.searchIn(text),\n            isMatch = _searcher$searchIn.isMatch,\n            score = _searcher$searchIn.score,\n            indices = _searcher$searchIn.indices;\n\n        if (isMatch) {\n          results.push({\n            item: text,\n            idx: idx,\n            matches: [{\n              score: score,\n              value: text,\n              norm: norm,\n              indices: indices\n            }]\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchLogical\",\n    value: function _searchLogical(query) {\n      var _this = this;\n\n      var expression = parse(query, this.options);\n\n      var evaluate = function evaluate(node, item, idx) {\n        if (!node.children) {\n          var keyId = node.keyId,\n              searcher = node.searcher;\n\n          var matches = _this._findMatches({\n            key: _this._keyStore.get(keyId),\n            value: _this._myIndex.getValueForItemAtKeyId(item, keyId),\n            searcher: searcher\n          });\n\n          if (matches && matches.length) {\n            return [{\n              idx: idx,\n              item: item,\n              matches: matches\n            }];\n          }\n\n          return [];\n        }\n\n        var res = [];\n\n        for (var i = 0, len = node.children.length; i < len; i += 1) {\n          var child = node.children[i];\n          var result = evaluate(child, item, idx);\n\n          if (result.length) {\n            res.push.apply(res, _toConsumableArray(result));\n          } else if (node.operator === LogicalOperator.AND) {\n            return [];\n          }\n        }\n\n        return res;\n      };\n\n      var records = this._myIndex.records;\n      var resultMap = {};\n      var results = [];\n      records.forEach(function (_ref3) {\n        var item = _ref3.$,\n            idx = _ref3.i;\n\n        if (isDefined(item)) {\n          var expResults = evaluate(expression, item, idx);\n\n          if (expResults.length) {\n            // Dedupe when adding\n            if (!resultMap[idx]) {\n              resultMap[idx] = {\n                idx: idx,\n                item: item,\n                matches: []\n              };\n              results.push(resultMap[idx]);\n            }\n\n            expResults.forEach(function (_ref4) {\n              var _resultMap$idx$matche;\n\n              var matches = _ref4.matches;\n\n              (_resultMap$idx$matche = resultMap[idx].matches).push.apply(_resultMap$idx$matche, _toConsumableArray(matches));\n            });\n          }\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchObjectList\",\n    value: function _searchObjectList(query) {\n      var _this2 = this;\n\n      var searcher = createSearcher(query, this.options);\n      var _this$_myIndex = this._myIndex,\n          keys = _this$_myIndex.keys,\n          records = _this$_myIndex.records;\n      var results = []; // List is Array<Object>\n\n      records.forEach(function (_ref5) {\n        var item = _ref5.$,\n            idx = _ref5.i;\n\n        if (!isDefined(item)) {\n          return;\n        }\n\n        var matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n        keys.forEach(function (key, keyIndex) {\n          matches.push.apply(matches, _toConsumableArray(_this2._findMatches({\n            key: key,\n            value: item[keyIndex],\n            searcher: searcher\n          })));\n        });\n\n        if (matches.length) {\n          results.push({\n            idx: idx,\n            item: item,\n            matches: matches\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_findMatches\",\n    value: function _findMatches(_ref6) {\n      var key = _ref6.key,\n          value = _ref6.value,\n          searcher = _ref6.searcher;\n\n      if (!isDefined(value)) {\n        return [];\n      }\n\n      var matches = [];\n\n      if (isArray(value)) {\n        value.forEach(function (_ref7) {\n          var text = _ref7.v,\n              idx = _ref7.i,\n              norm = _ref7.n;\n\n          if (!isDefined(text)) {\n            return;\n          }\n\n          var _searcher$searchIn2 = searcher.searchIn(text),\n              isMatch = _searcher$searchIn2.isMatch,\n              score = _searcher$searchIn2.score,\n              indices = _searcher$searchIn2.indices;\n\n          if (isMatch) {\n            matches.push({\n              score: score,\n              key: key,\n              value: text,\n              idx: idx,\n              norm: norm,\n              indices: indices\n            });\n          }\n        });\n      } else {\n        var text = value.v,\n            norm = value.n;\n\n        var _searcher$searchIn3 = searcher.searchIn(text),\n            isMatch = _searcher$searchIn3.isMatch,\n            score = _searcher$searchIn3.score,\n            indices = _searcher$searchIn3.indices;\n\n        if (isMatch) {\n          matches.push({\n            score: score,\n            key: key,\n            value: text,\n            norm: norm,\n            indices: indices\n          });\n        }\n      }\n\n      return matches;\n    }\n  }]);\n\n  return Fuse;\n}();\n\nFuse$1.version = '6.6.2';\nFuse$1.createIndex = createIndex;\nFuse$1.parseIndex = parseIndex;\nFuse$1.config = Config;\n\n{\n  Fuse$1.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nvar Fuse = Fuse$1;\n\nmodule.exports = Fuse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fuse.js/dist/fuse.common.js\n");

/***/ })

};
;